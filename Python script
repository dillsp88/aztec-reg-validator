from web3 import Web3
import time
from datetime import datetime, timedelta
from threading import Timer


PRIVATE_KEY = "YOU_PRIVATE_KEY"
RPC_URL = "YOU_RPC_Sepolia"
STAKING_CONTRACT = "0xF739D03e98e23A7B65940848aBA8921fF3bAc4b2"
VALIDATOR_ADDRESS = "YOU_PUBLIC_ADDRESS"
PROPOSER_ADDRESS = "YOU_PUBLIC_ADDRESS"
CHAIN_ID = 11155111
SCHEDULED_TIME = "21:49:12"  # Формат "ЧЧ:ММ:СС" UTC 'время подпирается индивидуально

CONTRACT_ABI = [
    {
        "inputs": [
            {"internalType": "address", "name": "validator", "type": "address"},
            {"internalType": "address", "name": "proposer", "type": "address"}
        ],
        "name": "addValidator",
        "outputs": [],
        "stateMutability": "nonpayable",
        "type": "function"
    }
]


def send_transaction():
        w3 = Web3(Web3.HTTPProvider(RPC_URL))
    account = w3.eth.account.from_key(PRIVATE_KEY)
    contract = w3.eth.contract(
        address=Web3.to_checksum_address(STAKING_CONTRACT),
        abi=CONTRACT_ABI
    )

    tx = contract.functions.addValidator(
        Web3.to_checksum_address(VALIDATOR_ADDRESS),
        Web3.to_checksum_address(PROPOSER_ADDRESS)
    ).build_transaction({
        'from': account.address,
        'nonce': w3.eth.get_transaction_count(account.address),
        'chainId': CHAIN_ID,
        'gas': 300000, # можно оставить без изменений
        'maxFeePerGas': Web3.to_wei(2, 'gwei'),   # если указать 1 млн, то при параметре gas 300000, максимум потребуется 300 ETH
        'maxPriorityFeePerGas': Web3.to_wei(2, 'gwei')  # ставить значение, такое же как и в maxFeePerGas
    })

    signed_tx = account.sign_transaction(tx)
    tx_hash = w3.eth.send_raw_transaction(signed_tx.raw_transaction)
    print(f"Транзакция отправлена: https://sepolia.etherscan.io/tx/{tx_hash.hex()}")


def schedule_transaction():
       now = datetime.utcnow()
    target = datetime.strptime(SCHEDULED_TIME, "%H:%M:%S")
    target = target.replace(year=now.year, month=now.month, day=now.day)

    if target < now:
        target += timedelta(days=1)

    delay = (target - now).total_seconds()
    print(f"Транзакция запланирована на {SCHEDULED_TIME} UTC")

    Timer(delay, send_transaction).start()
    time.sleep(delay + 1) 


if __name__ == "__main__":
    schedule_transaction()
